name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Добавляем права для push
permissions:
  contents: write

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgtest-dev cmake lcov

    - name: Build GoogleTest
      run: |
        cd /usr/src/googletest
        sudo mkdir -p build && cd build
        sudo cmake ..
        sudo make
        sudo cp lib/libgtest*.a /usr/lib/

    - name: Build application
      run: g++ -std=c++20 -Wall -Wextra -o student_app main.cpp database.cpp

    - name: Build and run tests with coverage
      run: |
        g++ -std=c++20 -Wall -Wextra --coverage -o test_runner test.cpp database.cpp -lgtest -lgtest_main -pthread
        ./test_runner

    - name: Generate coverage badge
      if: github.ref == 'refs/heads/main'
      run: |
        # Очищаем старые данные покрытия
        lcov --zerocounters --directory .
        
        # Запускаем тесты еще раз для генерации свежих данных
        ./test_runner
        
        # Генерируем отчет покрытия с игнорированием ошибок
        lcov --capture --directory . --output-file coverage.info --ignore-errors mismatch,gcov,source
        
        # Фильтруем системные файлы и gtest
        lcov --remove coverage.info '/usr/*' '*/gtest/*' '*gtest*' --output-file coverage.info --ignore-errors unused
        
        # Извлекаем процент покрытия (более надежный способ)
        COVERAGE=$(lcov --summary coverage.info 2>/dev/null | grep -E 'lines.*:' | grep -o '[0-9.]*%' | head -1 | sed 's/%//' || echo "0")
        
        # Проверяем что coverage не пустой
        if [ -z "$COVERAGE" ]; then
          COVERAGE="0"
        fi
        
        echo "Coverage: ${COVERAGE}%"
        
        # Определяем цвет (используем printf для преобразования в целое)
        COVERAGE_INT=$(printf "%.0f" "$COVERAGE")
        
        if [ "$COVERAGE_INT" -le "50" ]; then
          COLOR="red"
        elif [ "$COVERAGE_INT" -ge "80" ]; then
          COLOR="brightgreen"
        else
          COLOR="orange"
        fi
        
        echo "Badge color: $COLOR"
        
        # Создаем бейджик
        curl -s "https://img.shields.io/badge/coverage-${COVERAGE}%25-${COLOR}" > coverage-badge.svg
        
        # Проверяем что файл создался
        if [ -f coverage-badge.svg ] && [ -s coverage-badge.svg ]; then
          echo "Badge created successfully"
          
          # Коммитим если есть изменения
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add coverage-badge.svg
          
          if git diff --staged --quiet; then
            echo "No changes to coverage badge"
          else
            git commit -m "Update coverage badge [skip ci]"
            git push origin main
            echo "Coverage badge updated and pushed"
          fi
        else
          echo "Failed to create badge, creating fallback"
          curl -s "https://img.shields.io/badge/coverage-unknown-lightgrey" > coverage-badge.svg
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add coverage-badge.svg
          git commit -m "Add fallback coverage badge [skip ci]" || echo "No changes to commit"
          git push origin main || echo "Nothing to push"
        fi
